/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

motor Ramp = motor(PORT8, ratio18_1, false);
digital_out MogoMech = digital_out(Brain.ThreeWirePort.A);
motor leftMotorA = motor(PORT1, ratio6_1, false);
motor leftMotorB = motor(PORT2, ratio6_1, false);
motor leftMotorC = motor(PORT3, ratio6_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB, leftMotorC);
motor rightMotorA = motor(PORT6, ratio6_1, true);
motor rightMotorB = motor(PORT7, ratio6_1, true);
motor rightMotorC = motor(PORT8, ratio6_1, true);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB, rightMotorC);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);
motor Intake = motor(PORT9, ratio18_1, false);
digital_out Ramp1 = digital_out(Brain.ThreeWirePort.B);
digital_out Ramp2 = digital_out(Brain.ThreeWirePort.C);
controller Controller1 = controller(primary);

bool pneumaticActive = false;

//toggle piston on or off
void togglePneumatic() {
  pneumaticActive = !pneumaticActive;

  if (pneumaticActive) {
    MogoMech.set(true);
  }
  else {
    MogoMech.set(false);
  }
}

void toggleRamp1() {
  pneumaticActive = !pneumaticActive;

  if (pneumaticActive) {
    Ramp1.set(true);
  }
  else {
    Ramp1.set(false);
  }
}

void toggleRamp2() {
  pneumaticActive = !pneumaticActive;

  if (pneumaticActive) {
    Ramp2.set(true);
  }
  else {
    Ramp2.set(false);
  }
}

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
  LeftDriveSmart.spin(forward, 100, pct);
  RightDriveSmart.spin(forward, 100, pct);
  wait(1, sec);
  togglePneumatic();
  wait(1, sec);
  LeftDriveSmart.spin(reverse, 50, pct);
  RightDriveSmart.spin(reverse, 50, pct);
  wait(1, sec);
  Drivetrain.turnFor(right, 90, degrees);
  wait(1, sec);
  Intake.spin(forward, 100, pct);
  Ramp.spin(reverse, 50, pct);
  wait(1, sec);
  LeftDriveSmart.spin(forward, 80, pct);
  RightDriveSmart.spin(forward, 80, pct);
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................
    

    wait(20, msec); // Sleep the task for a short amount of time to
                    // prevent wasted resources.
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  vexcodeInit();
  Controller1.ButtonR1.pressed(togglePneumatic);
  Controller1.ButtonL1.pressed(toggleRamp1);
  Controller1.ButtonL2.pressed(toggleRamp2);
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
