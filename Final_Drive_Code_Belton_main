/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

//Work on on and off switch, odometry, group function the intake and ramp

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
bool MogoMechActive = false;
bool RampsActive = false;

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
  // ..........................................................................
  // Insert autonomous user code here.
  //Plan: 
  // ..........................................................................

  //left side
  Drivetrain.setDriveVelocity(75, percent);  // Set the drivetrain speed
  Drivetrain.driveFor(forward, 30, inches);   // Drive forward for 24 inches
  Drivetrain.stop(brakeType::brake);
  wait(1, sec);
  MogoMech.set(true);
  wait(1, sec);
  Drivetrain.driveFor(forward, 6, inches);
  Drivetrain.stop(brakeType::brake);
  wait(1, sec);
  Intake.spin(reverse, 100, pct);
  Ramp.spin(forward, 80, pct);
  wait(1, sec);
  Drivetrain.turnFor(right, 90, degrees);
  wait(1, sec);
  Drivetrain.driveFor(forward, 22, inches);
  Drivetrain.stop(brakeType::brake);
  wait(1, sec);
  Intake.spin(reverse, 100, pct);
  Ramp.spin(forward, 80, pct);
  wait(1, sec);
  Drivetrain.driveFor(forward, 8, inches);
  Drivetrain.stop(brakeType::brake);

  //right side
  //Drivetrain.setDriveVelocity(75, percent);  // Set the drivetrain speed
  //Drivetrain.driveFor(forward, 30, inches);   // Drive forward for 24 inches
  //Drivetrain.stop(brakeType::brake);
  //wait(1, sec);
  //MogoMech.set(true);
  //wait(1, sec);
  //Drivetrain.driveFor(forward, 6, inches);
  //Drivetrain.stop(brakeType::brake);
  //Intake.spin(reverse, 100, pct);
  //Ramp.spin(forward, 80, pct);
  //wait(1, sec);
  //wait(1, sec);
  //Drivetrain.turnFor(left, 90, degrees);
  //wait(1, sec);
  //Drivetrain.driveFor(forward, 22, inches);
  //Drivetrain.stop(brakeType::brake);
  //wait(1, sec);
  //Intake.spin(reverse, 100, pct);
  //Ramp.spin(forward, 80, pct);
  //wait(1, sec);
  //Drivetrain.driveFor(forward, 8, inches);
  //Drivetrain.stop(brakeType::brake);
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................
    if (Controller1.Axis3.position() != 0 || Controller1.Axis1.position() != 0) {
      Drivetrain.setDriveVelocity(Controller1.Axis3.position(), pct);
      Drivetrain.drive(forward);
    } 
    else {
      Drivetrain.stop(brakeType::brake); // Apply brakes when joystick is neutral
    }
    if(Controller1.ButtonA.pressing()) {
      while(Controller1.ButtonA.pressing()) {
        wait(10, msec);
      }
    MogoMechActive = !MogoMechActive;
    MogoMech.set(MogoMechActive);
    }

    if(Controller1.ButtonB.pressing()) {
      while(Controller1.ButtonB.pressing()) {
        wait(10, msec);
      }
    RampsActive = !RampsActive;
    Ramp1.set(RampsActive);
    Ramp2.set(RampsActive);
    }
    if(Controller1.ButtonUp.pressing()) {
      Intake.spin(forward, 100, pct);  // Spin intake motor forward at full speed
      }   
    else if(Controller1.ButtonDown.pressing()) {
      Intake.spin(reverse, 100, pct);  // Spin intake motor in reverse at full speed
      }
    else {
      Intake.stop(brakeType::brake);   // Stop the intake motor when no button is pressed
      }
    if(Controller1.ButtonLeft.pressing()) {
      Ramp.spin(forward, 100, pct);  // Spin intake motor forward at full speed
      }   
    else if(Controller1.ButtonRight.pressing()) {
      Ramp.spin(reverse, 100, pct);  // Spin intake motor in reverse at full speed
      }
    else {
      Ramp.stop(brakeType::brake);   // Stop the intake motor when no button is pressed
      }
  



    wait(20, msec); // Sleep the task for a short amount of time to
                    // prevent wasted resources.
  }
}
//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
