#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS (PRESET CODE)
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition)) // condition is just a placeholder until

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS (PRESET CODE)


// Robot configuration code.




// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}

#pragma endregion VEXcode Generated Robot Configuration

// Include the V5 Library
#include "vex.h"
// End Preset Code
// Allows for easier use of the VEX Library
using namespace vex;

void pre_auton(void) { // (Don't touch this)
  vexcodeInit():
}

//settings
// Movement for forward and backwards
double kP = 0.0; // Position - current location
double kI = 0.0; // Integral (YAW) - adjusts the output based on the accumulated error over time. (OVER A WIDE VARIETY OF POINTS)
double kD = 0.0; // Derivative - this component adjusts the output based on the rate of change of the error. (SPECIFIC POINT)

// Movement for turning
double TkP = 0.0; // Turn Position
double TkI = 0.0; // Turn Integral
double TkD = 0.0; // Turn Derivative

//modified autonomous settings
int desiredValue = 200;
int desiredTurnValue = 0;

int error; //value - desiredvalue or position 
int prevError = 0;
// ^ Finds the error based on the output given from the Position, Integral, Derivative (PID);
// After that, prevError will be refreshed, set the new direction angle to 0 and then based on the error, will produce a new angle.
int derivative; //error - prevError or speed
int totalError = 0;
// ^ Finds the speed of the robot at the given time of the error; 
// totalError is used in order to calculate the total error that is needed to be fixed, this includes the turn and movement errors.
int turnError; //value - desiredvalue or position
int turnPrevError = 0;
int turnDerivative; //error - preverror or speed
int turnTotalError = 0;
// Turning Error tuning, ill find the desired position and given that will calculate the turn error made. 
// On top of that, it will also find the prevError of the turn error and the speed so that it can be fixed.
bool resetDriveSensors = false;

bool enablePID = true;

int drivePID(){
  while(enablePID){

    if (resetDriveSensors) {
      resetDriveSensors = false;
      leftMotor.setPosition(0,degrees);
      rightMotor.setPosition(0,degrees);
    }


    int leftMotorPosition = leftMotor.position(degrees);
    int righMotorPosition = leftMotor.position(degrees);
    int averagePosition = (leftMotorPosition + rightMotorPosition)/2;

    error = averagePosition - desiredValue; //potential
    derivative = error - prevError; //derivative

    totalError += error; //integral or opposite of derivative > converts position to absement 

    double lateralMotorPower = (error*kP + derivative*kD + totalError*kI);

    //turn values
    int turnDifference = leftMotorPosition - rightMotorPosition
    

    turnError = turnAveragePosition - turnDesiredValue; //potential
    turnDerivative = turnError - turnPrevError; //derivative

    turnTotalError += turnError; //integral or opposite of derivative > converts position to absement 

    double turnMotorPower = (turnError*TkP + turnDerivative*TkD + turnTotalError*TkI);

    

    leftMotor.spin(forward, lateralMotorPower + turnVoluts, voltageUnits::volt);
    leftMotor.spin(forward, lateralMotorPower - turnVoluts, voltageUnits::volt);
    
    prevError = error;
    vex::task::sleep(20);

  }
  return 1;
}
// autonomous code
void autonomouse(void) {
  vex::task hello(drivePID);

  resetDriveSensors = true;
  desiredValue = 300;
  desiredTurnValue = 600;
  vex::task::sleep(1000)

  resetDriveSensors = true;
  desiredValue = 300;
  desiredTurnValue = 300;
  

}
// user control code
void usercontrol(void) {
  enablePID = false;

}
